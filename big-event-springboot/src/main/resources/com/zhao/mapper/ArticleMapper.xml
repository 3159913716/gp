<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhao.mapper.ArticleMapper">
<!--    添加文章-->
    <insert id="add" parameterType="com.zhao.pojo.Article" useGeneratedKeys="true" keyProperty="id">
        insert into article (
            title, content, cover_img, state,
            category_id, create_user, create_time, update_time
        ) values (
                     #{title}, #{content}, #{coverImg}, #{state},
                     #{categoryId}, #{createUser}, #{createTime}, #{updateTime}
                 )
    </insert>
<!--    修改文章-->
    <update id="update" parameterType="com.zhao.pojo.Article">
        update article
        set title = #{title},
            content = #{content},
            cover_img = #{coverImg},
            state = #{state},
            category_id = #{categoryId},
            update_time = #{updateTime}
        where id = #{id}
    </update>
    <!--    动态SQL-->
    <select id="list" resultType="com.zhao.pojo.Article">
        select * from article
        <where>
            <if test="categoryId!=null">
                category_id=#{categoryId}
            </if>
            <if test="state!=null">
                and state=#{state}
            </if>
            and create_user=#{userId}
        </where>
    </select>
<!--    根据id查找文章-->
    <select id="findById" resultType="com.zhao.pojo.Article">
        select *
        from article
        where id = #{id}
    </select>
<!--    删除文章-->
    <delete id="delete" parameterType="com.zhao.pojo.Article">
        delete from article
        where id = #{id}
    </delete>


    <select id="selectHomeArticles" resultType="com.zhao.pojo.ArticleHomeVO">
        SELECT
        a.id,
        a.title,
        a.cover_img as coverImg,
        SUBSTRING(a.content, 1, 100) as summary,
        u.username as author,
        a.create_time as createTime,
        a.state,
        a.category_id as categoryId,
        COALESCE(a.like_count, 0) as likeCount,
        COALESCE(a.collect_count, 0) as collectCount,
        (SELECT COUNT(*) FROM article_comment ac
        WHERE ac.article_id = a.id AND ac.is_deleted = 0) as commentCount
        FROM article a
        LEFT JOIN user u ON a.create_user = u.id
        WHERE a.state = #{state}
        <choose>
            <when test="sort == 'hot'">
                ORDER BY (COALESCE(a.like_count, 0) + COALESCE(a.collect_count, 0)) DESC,
                a.create_time DESC
            </when>
            <otherwise>
                ORDER BY a.create_time DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="countHomeArticles" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM article a
        WHERE a.state = #{state}
    </select>
</mapper>